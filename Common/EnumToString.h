#pragma once

#include <openxr/openxr.h>

// Generic enum to string template function declaration
template<typename EnumType>
const char* EnumToString(EnumType value);

// XrSessionState enum to string specialization
template<>
inline const char* EnumToString<XrSessionState>(XrSessionState value) {
    switch (value) {
        case XR_SESSION_STATE_UNKNOWN: return "XR_SESSION_STATE_UNKNOWN";
        case XR_SESSION_STATE_IDLE: return "XR_SESSION_STATE_IDLE";
        case XR_SESSION_STATE_READY: return "XR_SESSION_STATE_READY";
        case XR_SESSION_STATE_SYNCHRONIZED: return "XR_SESSION_STATE_SYNCHRONIZED";
        case XR_SESSION_STATE_VISIBLE: return "XR_SESSION_STATE_VISIBLE";
        case XR_SESSION_STATE_FOCUSED: return "XR_SESSION_STATE_FOCUSED";
        case XR_SESSION_STATE_STOPPING: return "XR_SESSION_STATE_STOPPING";
        case XR_SESSION_STATE_LOSS_PENDING: return "XR_SESSION_STATE_LOSS_PENDING";
        case XR_SESSION_STATE_EXITING: return "XR_SESSION_STATE_EXITING";
        default: return "UNKNOWN_SESSION_STATE";
    }
}

// XrReferenceSpaceType enum to string specialization
template<>
inline const char* EnumToString<XrReferenceSpaceType>(XrReferenceSpaceType value) {
    switch (value) {
        case XR_REFERENCE_SPACE_TYPE_VIEW: return "XR_REFERENCE_SPACE_TYPE_VIEW";
        case XR_REFERENCE_SPACE_TYPE_LOCAL: return "XR_REFERENCE_SPACE_TYPE_LOCAL";
        case XR_REFERENCE_SPACE_TYPE_STAGE: return "XR_REFERENCE_SPACE_TYPE_STAGE";
        case XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT: return "XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT";
        case XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO: return "XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO";
        case XR_REFERENCE_SPACE_TYPE_LOCALIZATION_MAP_ML: return "XR_REFERENCE_SPACE_TYPE_LOCALIZATION_MAP_ML";
        case XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR_EXT: return "XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR_EXT";
        default: return "UNKNOWN_REFERENCE_SPACE_TYPE";
    }
}

// XrActionType enum to string specialization
template<>
inline const char* EnumToString<XrActionType>(XrActionType value) {
    switch (value) {
        case XR_ACTION_TYPE_BOOLEAN_INPUT: return "XR_ACTION_TYPE_BOOLEAN_INPUT";
        case XR_ACTION_TYPE_FLOAT_INPUT: return "XR_ACTION_TYPE_FLOAT_INPUT";
        case XR_ACTION_TYPE_VECTOR2F_INPUT: return "XR_ACTION_TYPE_VECTOR2F_INPUT";
        case XR_ACTION_TYPE_POSE_INPUT: return "XR_ACTION_TYPE_POSE_INPUT";
        case XR_ACTION_TYPE_VIBRATION_OUTPUT: return "XR_ACTION_TYPE_VIBRATION_OUTPUT";
        default: return "UNKNOWN_ACTION_TYPE";
    }
}

// XrEnvironmentBlendMode enum to string specialization
template<>
inline const char* EnumToString<XrEnvironmentBlendMode>(XrEnvironmentBlendMode value) {
    switch (value) {
        case XR_ENVIRONMENT_BLEND_MODE_OPAQUE: return "XR_ENVIRONMENT_BLEND_MODE_OPAQUE";
        case XR_ENVIRONMENT_BLEND_MODE_ADDITIVE: return "XR_ENVIRONMENT_BLEND_MODE_ADDITIVE";
        case XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND: return "XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND";
        default: return "UNKNOWN_ENVIRONMENT_BLEND_MODE";
    }
}

// XrEyeVisibility enum to string specialization
template<>
inline const char* EnumToString<XrEyeVisibility>(XrEyeVisibility value) {
    switch (value) {
        case XR_EYE_VISIBILITY_BOTH: return "XR_EYE_VISIBILITY_BOTH";
        case XR_EYE_VISIBILITY_LEFT: return "XR_EYE_VISIBILITY_LEFT";
        case XR_EYE_VISIBILITY_RIGHT: return "XR_EYE_VISIBILITY_RIGHT";
        default: return "UNKNOWN_EYE_VISIBILITY";
    }
}

// XrResult enum to string specialization
template<>
inline const char* EnumToString<XrResult>(XrResult value) {
    switch (value) {
        case XR_SUCCESS: return "XR_SUCCESS";
        case XR_TIMEOUT_EXPIRED: return "XR_TIMEOUT_EXPIRED";
        case XR_SESSION_LOSS_PENDING: return "XR_SESSION_LOSS_PENDING";
        case XR_EVENT_UNAVAILABLE: return "XR_EVENT_UNAVAILABLE";
        case XR_SPACE_BOUNDS_UNAVAILABLE: return "XR_SPACE_BOUNDS_UNAVAILABLE";
        case XR_SESSION_NOT_FOCUSED: return "XR_SESSION_NOT_FOCUSED";
        case XR_FRAME_DISCARDED: return "XR_FRAME_DISCARDED";
        case XR_ERROR_VALIDATION_FAILURE: return "XR_ERROR_VALIDATION_FAILURE";
        case XR_ERROR_RUNTIME_FAILURE: return "XR_ERROR_RUNTIME_FAILURE";
        case XR_ERROR_OUT_OF_MEMORY: return "XR_ERROR_OUT_OF_MEMORY";
        case XR_ERROR_API_VERSION_UNSUPPORTED: return "XR_ERROR_API_VERSION_UNSUPPORTED";
        case XR_ERROR_INITIALIZATION_FAILED: return "XR_ERROR_INITIALIZATION_FAILED";
        case XR_ERROR_FUNCTION_UNSUPPORTED: return "XR_ERROR_FUNCTION_UNSUPPORTED";
        case XR_ERROR_FEATURE_UNSUPPORTED: return "XR_ERROR_FEATURE_UNSUPPORTED";
        case XR_ERROR_EXTENSION_NOT_PRESENT: return "XR_ERROR_EXTENSION_NOT_PRESENT";
        case XR_ERROR_LIMIT_REACHED: return "XR_ERROR_LIMIT_REACHED";
        case XR_ERROR_SIZE_INSUFFICIENT: return "XR_ERROR_SIZE_INSUFFICIENT";
        case XR_ERROR_HANDLE_INVALID: return "XR_ERROR_HANDLE_INVALID";
        case XR_ERROR_INSTANCE_LOST: return "XR_ERROR_INSTANCE_LOST";
        case XR_ERROR_SESSION_RUNNING: return "XR_ERROR_SESSION_RUNNING";
        case XR_ERROR_SESSION_NOT_RUNNING: return "XR_ERROR_SESSION_NOT_RUNNING";
        case XR_ERROR_SESSION_LOST: return "XR_ERROR_SESSION_LOST";
        case XR_ERROR_SYSTEM_INVALID: return "XR_ERROR_SYSTEM_INVALID";
        case XR_ERROR_PATH_INVALID: return "XR_ERROR_PATH_INVALID";
        case XR_ERROR_PATH_COUNT_EXCEEDED: return "XR_ERROR_PATH_COUNT_EXCEEDED";
        case XR_ERROR_PATH_FORMAT_INVALID: return "XR_ERROR_PATH_FORMAT_INVALID";
        case XR_ERROR_PATH_UNSUPPORTED: return "XR_ERROR_PATH_UNSUPPORTED";
        case XR_ERROR_LAYER_INVALID: return "XR_ERROR_LAYER_INVALID";
        case XR_ERROR_LAYER_LIMIT_EXCEEDED: return "XR_ERROR_LAYER_LIMIT_EXCEEDED";
        case XR_ERROR_SWAPCHAIN_RECT_INVALID: return "XR_ERROR_SWAPCHAIN_RECT_INVALID";
        case XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED: return "XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED";
        case XR_ERROR_ACTION_TYPE_MISMATCH: return "XR_ERROR_ACTION_TYPE_MISMATCH";
        case XR_ERROR_SESSION_NOT_READY: return "XR_ERROR_SESSION_NOT_READY";
        case XR_ERROR_SESSION_NOT_STOPPING: return "XR_ERROR_SESSION_NOT_STOPPING";
        case XR_ERROR_TIME_INVALID: return "XR_ERROR_TIME_INVALID";
        case XR_ERROR_REFERENCE_SPACE_UNSUPPORTED: return "XR_ERROR_REFERENCE_SPACE_UNSUPPORTED";
        case XR_ERROR_FILE_ACCESS_ERROR: return "XR_ERROR_FILE_ACCESS_ERROR";
        case XR_ERROR_FILE_CONTENTS_INVALID: return "XR_ERROR_FILE_CONTENTS_INVALID";
        case XR_ERROR_FORM_FACTOR_UNSUPPORTED: return "XR_ERROR_FORM_FACTOR_UNSUPPORTED";
        case XR_ERROR_FORM_FACTOR_UNAVAILABLE: return "XR_ERROR_FORM_FACTOR_UNAVAILABLE";
        case XR_ERROR_API_LAYER_NOT_PRESENT: return "XR_ERROR_API_LAYER_NOT_PRESENT";
        case XR_ERROR_CALL_ORDER_INVALID: return "XR_ERROR_CALL_ORDER_INVALID";
        case XR_ERROR_GRAPHICS_DEVICE_INVALID: return "XR_ERROR_GRAPHICS_DEVICE_INVALID";
        case XR_ERROR_POSE_INVALID: return "XR_ERROR_POSE_INVALID";
        case XR_ERROR_INDEX_OUT_OF_RANGE: return "XR_ERROR_INDEX_OUT_OF_RANGE";
        case XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED: return "XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED";
        case XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED: return "XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED";
        case XR_ERROR_NAME_DUPLICATED: return "XR_ERROR_NAME_DUPLICATED";
        case XR_ERROR_NAME_INVALID: return "XR_ERROR_NAME_INVALID";
        case XR_ERROR_ACTIONSET_NOT_ATTACHED: return "XR_ERROR_ACTIONSET_NOT_ATTACHED";
        case XR_ERROR_ACTIONSETS_ALREADY_ATTACHED: return "XR_ERROR_ACTIONSETS_ALREADY_ATTACHED";
        case XR_ERROR_LOCALIZED_NAME_DUPLICATED: return "XR_ERROR_LOCALIZED_NAME_DUPLICATED";
        case XR_ERROR_LOCALIZED_NAME_INVALID: return "XR_ERROR_LOCALIZED_NAME_INVALID";
        case XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING: return "XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING";
        case XR_ERROR_RUNTIME_UNAVAILABLE: return "XR_ERROR_RUNTIME_UNAVAILABLE";
        default: return "UNKNOWN_XR_RESULT";
    }
}

// XrFormFactor enum to string specialization
template<>
inline const char* EnumToString<XrFormFactor>(XrFormFactor value) {
    switch (value) {
        case XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY: return "XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY";
        case XR_FORM_FACTOR_HANDHELD_DISPLAY: return "XR_FORM_FACTOR_HANDHELD_DISPLAY";
        default: return "UNKNOWN_FORM_FACTOR";
    }
}

// XrViewConfigurationType enum to string specialization
template<>
inline const char* EnumToString<XrViewConfigurationType>(XrViewConfigurationType value) {
    switch (value) {
        case XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO: return "XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO";
        case XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO: return "XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO";
        case XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO: return "XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO";
        case XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT: return "XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT";
        default: return "UNKNOWN_VIEW_CONFIGURATION_TYPE";
    }
}
